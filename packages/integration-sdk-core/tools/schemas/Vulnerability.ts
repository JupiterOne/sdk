/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type Vulnerability = Static<typeof Vulnerability>;
export const Vulnerability = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    approved: Type.Optional(
      Type.Boolean({
        description: 'If this is record has been reviewed and approved.',
        inherited: true,
      }),
    ),
    approvedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was approved.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    approvers: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The list of approvers on the record.',
        inherited: true,
      }),
    ),
    blocking: Type.Union([Type.Boolean(), Type.Null()]),
    category: Type.Union([Type.String(), Type.Null()]),
    classification: Type.Optional(
      Type.String({
        description:
          'The sensitivity of the data; should match company data classification scheme. For example: critical - confidential - internal - public.',
        examples: ['critical', 'confidential', 'internal', 'public'],
        inherited: true,
      }),
    ),
    content: Type.Optional(
      Type.String({
        description: 'Text content of the record/documentation',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    exception: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record has an applied exception. For example, exception for a known finding or a PR that is not fully approved.',
        inherited: true,
      }),
    ),
    exceptionReason: Type.Optional(
      Type.String({
        description: 'Reason / description of the exception.',
        inherited: true,
      }),
    ),
    exploitability: Type.Optional(
      Type.Number({ description: 'The exploitability score/rating.' }),
    ),
    impact: Type.Optional(
      Type.Number({ description: 'The impact score/rating.' }),
    ),
    impacts: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'The target listing of projects, applications, repos or systems this vulnerability impacts. Specifying either the project/repo name or the application URL here will auto-map this Vulnerability to the corresponding Project/CodeRepo/Application entity if a match is found.',
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    open: Type.Union([Type.Boolean(), Type.Null()]),
    priority: Type.Optional(
      Type.String({
        description:
          "Priority level mapping to Severity rating. Can be a string such as 'critical', 'high', 'medium', 'low', 'info'.  Or an integer usually between 0-5.",
      }),
    ),
    production: Type.Union([Type.Boolean(), Type.Null()]),
    public: Type.Union([Type.Boolean(), Type.Null()]),
    references: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The array of links to references.',
      }),
    ),
    remediationSLA: Type.Optional(
      Type.Number({
        description:
          "The number of days that the Vulnerability must be remediated within, based on SLA set by the organization's internal vulnerability management program policy. The actually due date is set by 'remediationDueOn' property on the `IMPACTS` relationship between the Vulnerability and its impacted resource entity.",
      }),
    ),
    reportedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was reported/opened. In most cases, this would be the same as `createdOn` but occasionally a record can be created at a different time than when it was first reported.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    reporter: Type.Optional(
      Type.String({
        description:
          'The person or system that reported or created this record.',
        inherited: true,
      }),
    ),
    score: Type.Optional(
      Type.Number({
        description: 'The overall vulnerability score, e.g. CVSSv3.',
      }),
    ),
    severity: Type.Union([Type.String(), Type.Null()]),
    status: Type.Optional(
      Type.String({ description: 'Status of the vulnerability' }),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    validated: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this Vulnerability finding has been validated by the security team.',
      }),
    ),
    vector: Type.Optional(
      Type.String({
        description:
          "The vulnerability attack vector. (e.g. a CVSSv3 vector looks like this - 'AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N')",
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Hyperlink to the location of this record, e.g. URL to a Jira issue',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#Vulnerability',
    description:
      "A security vulnerability (application or system or infrastructure). A single vulnerability may relate to multiple findings and impact multiple resources. The `IMPACTS` relationship between the Vulnerability and the resource entity that was impacted serves as the record of the finding. The `IMPACTS` relationship carries properties such as 'identifiedOn', 'remediatedOn', 'remediationDueOn', 'issueLink', etc.",
  },
);
