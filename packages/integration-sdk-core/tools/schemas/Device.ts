/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type Device = Static<typeof Device>;
export const Device = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    active: Type.Optional(
      Type.Boolean({
        description: 'Indicates if this entity is currently active.',
        inherited: true,
      }),
    ),
    assetTag: Type.Optional(
      Type.String({
        description:
          'The asset tag number/label that matches the identifier in asset tracking system, for company owned physical devices',
      }),
    ),
    autoSecurityPatchEnabled: Type.Optional(
      Type.Boolean({
        description: 'Indicates if security updates are auto-installed',
        default: false,
      }),
    ),
    autoSystemPatchEnabled: Type.Optional(
      Type.Boolean({
        description: 'Indicates if operating system updates are auto-installed',
        default: false,
      }),
    ),
    BYOD: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a BYOD device -- an employee-provided device that has access to company systems/resources.',
        default: false,
      }),
    ),
    category: Type.Union([Type.String(), Type.Null()]),
    classification: Type.Optional(Type.Union([Type.String(), Type.Null()])),
    complianceStatus: Type.Optional(
      Type.Number({
        description:
          'The compliance status of the entity, as a percentage of compliancy.',
        minimum: 0,
        maximum: 1,
        inherited: true,
      }),
    ),
    cost: Type.Optional(
      Type.Number({ description: 'The purchase cost of the device.' }),
    ),
    createdBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that created the entity',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    criticality: Type.Optional(
      Type.Number({
        description:
          'A number that represents the value or criticality of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    deletedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that deleted the entity',
        inherited: true,
      }),
    ),
    deletedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was deleted at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    deviceId: Type.Union([Type.String(), Type.Null()]),
    discoveredBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that discovered the entity',
        inherited: true,
      }),
    ),
    discoveredOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was discovered.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    encrypted: Type.Optional(
      Type.Boolean({
        description: 'Indicates if the primary device storage is encrypted',
        default: false,
      }),
    ),
    expiresOn: Type.Optional(
      Type.Number({
        description:
          'If the entity is a temporary resource, optionally set the expiration date. For example, the expiration date of an SSL cert.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    firewallEnabled: Type.Optional(
      Type.Boolean({
        description: 'Indicates if local/host firewall is enabled',
        default: false,
      }),
    ),
    hardwareModel: Type.Optional(
      Type.String({
        description: 'The device hardware model, e.g. MacBookPro13,3',
      }),
    ),
    hardwareSerial: Type.Optional(
      Type.String({ description: 'The device serial number' }),
    ),
    hardwareVendor: Type.Optional(
      Type.String({
        description:
          'The manufacturer or vendor of the device, e.g. Apple Inc., Generic',
      }),
    ),
    hardwareVersion: Type.Optional(
      Type.String({ description: 'The device hardware version' }),
    ),
    id: Type.Optional(
      Type.Union([Type.String(), Type.Array(Type.String())], {
        description:
          'Identifiers of this entity assigned by the providers. Values are expected to be unique within the provider scope.',
        inherited: true,
      }),
    ),
    lastSeenOn: Type.Union([Type.Number(), Type.Null()]),
    location: Type.Optional(
      Type.String({ description: 'Site where this device is located.' }),
    ),
    make: Type.Union([Type.String(), Type.Null()]),
    malwareProtected: Type.Optional(
      Type.Boolean({
        description: 'Indicates if malware protection is enabled',
        default: false,
      }),
    ),
    model: Type.Union([Type.String(), Type.Null()]),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    notes: Type.Optional(
      Type.Array(Type.String(), {
        description: 'User provided notes about this entity',
        inherited: true,
      }),
    ),
    osDetails: Type.Optional(
      Type.String({
        description:
          'Operating System Full Details (e.g. macOS High Sierra version 10.13.6)',
      }),
    ),
    osName: Type.Optional(
      Type.String({ description: 'Operating System Name (e.g. macOS)' }),
    ),
    osVersion: Type.Optional(
      Type.String({ description: 'Operating System Version (e.g. 10.13.6)' }),
    ),
    owner: Type.Optional(
      Type.String({
        description:
          'The owner of this entity. This could reference the name of the owner, or as reference ID/key to another entity in the graph as the owner.',
        inherited: true,
      }),
    ),
    platform: Type.Optional(
      Type.Union(
        [
          Type.Literal('darwin'),
          Type.Literal('linux'),
          Type.Literal('unix'),
          Type.Literal('windows'),
          Type.Literal('android'),
          Type.Literal('ios'),
          Type.Literal('embedded'),
          Type.Literal('other'),
        ],
        { description: 'Operating System Platform' },
      ),
    ),
    public: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a public-facing resource (e.g. a public IP or public DNS record) or if the entity is publicly accessible. Default is false.',
        inherited: true,
      }),
    ),
    remoteAccessEnabled: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if remote access/login to the device is enabled',
        default: false,
      }),
    ),
    risk: Type.Optional(
      Type.Number({
        description: 'The risk level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    screenLockEnabled: Type.Optional(
      Type.Boolean({
        description: 'Indicates if screen lock protection is enabled',
        default: false,
      }),
    ),
    screenLockTimeout: Type.Optional(
      Type.Number({ description: 'Screen lock timeout in seconds' }),
    ),
    serial: Type.Union([Type.String(), Type.Null()]),
    status: Type.Optional(
      Type.Union(
        [
          Type.Literal('assigned'),
          Type.Literal('archived'),
          Type.Literal('decommissioned'),
          Type.Literal('defective'),
          Type.Literal('deployed'),
          Type.Literal('disposed'),
          Type.Literal('locked'),
          Type.Literal('lost/stolen'),
          Type.Literal('pending'),
          Type.Literal('ready'),
          Type.Literal('unknown'),
          Type.Literal('other'),
        ],
        { description: 'Status label of this device' },
      ),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    tags: Type.Optional(
      Type.Array(Type.String(), {
        description: 'An array of unnamed tags',
        inherited: true,
      }),
    ),
    temporary: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node is a temporary resource, such as a lambda instance or an EC2 instance started by ECS.',
        inherited: true,
      }),
    ),
    trust: Type.Optional(
      Type.Number({
        description: 'The trust level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    trusted: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a trusted resource. For example, a trusted Network, Host, Device, Application, Person, User, or Vendor.',
        inherited: true,
      }),
    ),
    updatedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that updated the entity',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    userEmails: Type.Optional(
      Type.Array(Type.String({ format: 'email' }), {
        description:
          "The email addresses of the users this device is assigned to. Used if the device is shared by more than one user. Otherwise the 'owner' is the sole user. Leave empty/undefined if the device is unassigned.",
      }),
    ),
    validated: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node has been validated as a known/valid Entity.',
        inherited: true,
      }),
    ),
    value: Type.Optional(
      Type.Number({
        description:
          'The estimated business value of the device. The value is typically calculated as the monetary cost of the device + the value of data on the device.',
      }),
    ),
    version: Type.Optional(
      Type.String({
        description: 'Same as hardwareVersion: The device hardware version',
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Web link to the source. For example: https://console.aws.amazon.com/iam/home#/roles/Administrator. This property is used by the UI to add a hyperlink to the entity.',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#Device',
    description:
      'A physical device or media, such as a server, laptop, workstation, smartphone, tablet, router, firewall, switch, wifi-access-point, usb-drive, etc. The exact data type is described in the _type property of the Entity.',
  },
);
