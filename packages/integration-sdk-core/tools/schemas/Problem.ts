/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type Problem = Static<typeof Problem>;
export const Problem = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    approved: Type.Optional(
      Type.Boolean({
        description: 'If this is record has been reviewed and approved.',
        inherited: true,
      }),
    ),
    approvedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was approved.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    approvers: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The list of approvers on the record.',
        inherited: true,
      }),
    ),
    assessment: Type.Optional(
      Type.String({
        description:
          'The name/id of the assessment that produced this finding.',
        inherited: true,
      }),
    ),
    blocksProduction: Type.Optional(
      Type.Boolean({
        description:
          'Indicates whether this vulnerability finding is a blocking issue. If true, it should block a production deploy. Defaults to false.',
        default: false,
        inherited: true,
      }),
    ),
    category: Type.Union(
      [
        Type.String(),
        Type.Array(Type.String(), {
          examples: [
            'data',
            'application',
            'host',
            'network',
            'endpoint',
            'malware',
            'event',
          ],
        }),
      ],
      { description: 'The category of the finding.', inherited: true },
    ),
    classification: Type.Optional(
      Type.String({
        description:
          'The sensitivity of the data; should match company data classification scheme. For example: critical - confidential - internal - public.',
        examples: ['critical', 'confidential', 'internal', 'public'],
        inherited: true,
      }),
    ),
    content: Type.Optional(
      Type.String({
        description: 'Text content of the record/documentation',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    exception: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record has an applied exception. For example, exception for a known finding or a PR that is not fully approved.',
        inherited: true,
      }),
    ),
    exceptionReason: Type.Optional(
      Type.String({
        description: 'Reason / description of the exception.',
        inherited: true,
      }),
    ),
    exploitability: Type.Optional(
      Type.Number({
        description: 'The exploitability score/rating.',
        inherited: true,
      }),
    ),
    impact: Type.Optional(
      Type.String({
        description: 'The impact description or rating.',
        inherited: true,
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    numericSeverity: Type.Number({
      description: 'Severity rating based on impact and exploitability.',
      examples: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      inherited: true,
    }),
    open: Type.Boolean({
      description: 'Indicates if this is an open vulnerability.',
      inherited: true,
    }),
    priority: Type.Optional(
      Type.String({
        description:
          "Priority level mapping to Severity rating. Can be a string such as 'critical', 'high', 'medium', 'low', 'info'.  Or an integer usually between 0-5.",
        inherited: true,
      }),
    ),
    production: Type.Optional(
      Type.Boolean({
        description: 'Indicates if this vulnerability is in production.',
        inherited: true,
      }),
    ),
    public: Type.Optional(
      Type.Boolean({
        description:
          "Indicates if this is a publicly disclosed vulnerability. If yes, this is usually a CVE and the 'webLink' should be set to 'https://nvd.nist.gov/vuln/detail/${CVE-Number}' or to a vendor URL. If not, it is most likely a custom application vulnerability.",
        inherited: true,
      }),
    ),
    recommendation: Type.Optional(
      Type.String({
        description: 'Recommendation on how to remediate/fix this finding.',
        inherited: true,
      }),
    ),
    references: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The array of links to references.',
        inherited: true,
      }),
    ),
    remediationSLA: Type.Optional(
      Type.Number({
        description:
          "The number of days that the Vulnerability must be remediated within, based on SLA set by the organization's internal vulnerability management program policy. The actually due date is set by 'remediationDueOn' property on the `IMPACTS` relationship between the Vulnerability and its impacted resource entity.",
        inherited: true,
      }),
    ),
    reportedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was reported/opened. In most cases, this would be the same as `createdOn` but occasionally a record can be created at a different time than when it was first reported.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    reporter: Type.Optional(
      Type.String({
        description:
          'The person or system that reported or created this record.',
        inherited: true,
      }),
    ),
    score: Type.Optional(
      Type.Number({
        description: 'The overall vulnerability score, e.g. CVSSv3.',
        inherited: true,
      }),
    ),
    severity: Type.String({
      description: 'Severity rating based on impact and exploitability.',
      examples: ['none', 'informational', 'low', 'medium', 'high', 'critical'],
      inherited: true,
    }),
    status: Type.Optional(
      Type.String({
        description: 'Status of the vulnerability',
        inherited: true,
      }),
    ),
    stepsToReproduce: Type.Optional(
      Type.Array(Type.String(), {
        description: 'Steps to reproduce this finding.',
        inherited: true,
      }),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    targetDetails: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'Additional details about the targets. Can be a string or an array.',
        inherited: true,
      }),
    ),
    targets: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'The target listing of projects, applications, repos or systems this vulnerability impacts. Specifying either the project/repo name or the application URL here will auto-map this Vulnerability to the corresponding Project/CodeRepo/Application entity if a match is found.',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    validated: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this Vulnerability finding has been validated by the security team.',
        inherited: true,
      }),
    ),
    vector: Type.Optional(
      Type.String({
        description:
          "The vulnerability attack vector. (e.g. a CVSSv3 vector looks like this - 'AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N')",
        inherited: true,
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Hyperlink to the location of this record, e.g. URL to a Jira issue',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#Problem',
    description:
      'A problem identified from the analysis and correlation of assets and findings that is a notable issue worthy of action. It could be (or become) the cause, or potential cause, of one or more incidents or findings.',
  },
);
