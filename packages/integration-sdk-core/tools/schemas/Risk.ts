/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type Risk = Static<typeof Risk>;
export const Risk = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    approved: Type.Optional(
      Type.Boolean({
        description: 'If this is record has been reviewed and approved.',
        inherited: true,
      }),
    ),
    approvedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was approved.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    approvers: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The list of approvers on the record.',
        inherited: true,
      }),
    ),
    assessment: Type.Optional(
      Type.String({
        description: 'The name/id of the assessment that produced this risk.',
      }),
    ),
    category: Type.Optional(
      Type.String({
        description:
          "The category (or area) of the risk. For example, 'process maturity' or 'natural disaster'.",
      }),
    ),
    classification: Type.Optional(
      Type.String({
        description:
          'The sensitivity of the data; should match company data classification scheme. For example: critical - confidential - internal - public.',
        examples: ['critical', 'confidential', 'internal', 'public'],
        inherited: true,
      }),
    ),
    content: Type.Optional(
      Type.String({
        description: 'Text content of the record/documentation',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    details: Type.Optional(
      Type.String({ description: 'Additional details to describe the risk.' }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    exception: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record has an applied exception. For example, exception for a known finding or a PR that is not fully approved.',
        inherited: true,
      }),
    ),
    exceptionReason: Type.Optional(
      Type.String({
        description: 'Reason / description of the exception.',
        inherited: true,
      }),
    ),
    impact: Type.Number({
      description:
        "Impact rating. '3: high/severe', '2: medium/moderate', '1: low/minor', '0: none/insignificant'.",
      examples: [0, 1, 2, 3],
    }),
    mitigation: Type.Optional(
      Type.String({
        description:
          'Description of the mitigation, either planned or implemented, if applicable.',
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    open: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record is currently open. For example, an open Vulnerability finding (Vulnerability extends Record).',
        inherited: true,
      }),
    ),
    probability: Type.Number({
      description:
        "Probability rating of the risk: '3: high/certain', '2: medium/likely', '1: low/unlikely', '0: none/negligible'.",
      examples: [0, 1, 2, 3],
    }),
    production: Type.Optional(
      Type.Boolean({
        description:
          'If this is a production record. For example, a production change management ticket would have this set to `true`, and have a `category` = `change` property. Another example would be a Vulnerability finding in production.',
        inherited: true,
      }),
    ),
    public: Type.Optional(
      Type.Boolean({
        description: 'If this is a public record. Defaults to false.',
        default: false,
        inherited: true,
      }),
    ),
    reportedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was reported/opened. In most cases, this would be the same as `createdOn` but occasionally a record can be created at a different time than when it was first reported.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    reporter: Type.Optional(
      Type.String({
        description:
          'The person or system that reported or created this record.',
        inherited: true,
      }),
    ),
    score: Type.Number({
      description: 'Overall Risk Score = Probability x Impact',
    }),
    status: Type.String({
      description:
        'Current status of this documented risk. Default status is `open`.',
      examples: [
        'reported',
        'acknowledged',
        'accepted',
        'mitigated',
        'prioritized',
        'transferred',
        'pending',
        'open',
      ],
    }),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Hyperlink to the location of this record, e.g. URL to a Jira issue',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#Risk',
    description:
      'An object that represents an identified Risk as the result of an Assessment. The collection of Risk objects in JupiterOne make up the Risk Register. A Control may have a `MITIGATES` relationship to a Risk.',
  },
);
