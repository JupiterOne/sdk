/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type Vendor = Static<typeof Vendor>;
export const Vendor = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    active: Type.Optional(
      Type.Boolean({
        description: 'Indicates if this entity is currently active.',
        inherited: true,
      }),
    ),
    admins: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'List of admin users to the vendor account, if applicable. If this vendor account is integrated directly to JupiterOne and its data is ingested, the admin users should be already mapped as User entities.',
      }),
    ),
    alternateContactAddress: Type.Optional(
      Type.String({
        description:
          'Alternate/secondary physical/mailing address of the vendor.',
      }),
    ),
    alternateContactEmail: Type.Optional(
      Type.String({
        description:
          "Email of the vendor's alternate/secondary point of contact person.",
        format: 'email',
      }),
    ),
    alternateContactName: Type.Optional(
      Type.String({
        description:
          "The vendor's alternate/secondary point of contact person.",
      }),
    ),
    alternateContactPhone: Type.Optional(
      Type.String({
        description:
          "Phone number of the vendor's alternate/secondary point of contact person.",
      }),
    ),
    alternateContactTitle: Type.Optional(
      Type.String({
        description:
          "The title of the vendor's alternate/secondary point of contact. For example, 'CISO'.",
      }),
    ),
    breachResponseDays: Type.Optional(
      Type.Number({
        description:
          'The number of days the vendor agrees to report an identified data breach, per vendor agreement and/or SLA. This is typically 3 to 30 days. Note that GDPR requires breach notification within 3 days / 72 hours.',
      }),
    ),
    category: Type.Union([Type.String(), Type.Array(Type.String())], {
      description: 'The category of vendor.',
      examples: [
        'business-operations',
        'cloud',
        'facilities',
        'finance',
        'infrastructure',
        'legal',
        'purchasing',
        'security',
        'software',
        'platform-development',
        'platform-social-media',
        'professional-services-staffing',
        'professional-services-recruiting',
        'professional-services-consulting',
        'generic-service-provider',
        'generic-subscription',
        'CSP',
        'ISP',
        'MSP',
        'MSSP',
        'IdP',
        'other',
      ],
    }),
    classification: Type.Optional(Type.Union([Type.String(), Type.Null()])),
    complianceStatus: Type.Optional(
      Type.Number({
        description:
          'The compliance status of the entity, as a percentage of compliancy.',
        minimum: 0,
        maximum: 1,
        inherited: true,
      }),
    ),
    createdBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that created the entity',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    criticality: Type.Optional(
      Type.Number({
        description:
          'A number that represents the value or criticality of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    deletedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that deleted the entity',
        inherited: true,
      }),
    ),
    deletedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was deleted at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    departments: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'List of business departments the vendor provides service for (e.g. IT, HR, Finance, Marketing, Development/Engineering, Security).',
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    discoveredBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that discovered the entity',
        inherited: true,
      }),
    ),
    discoveredOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was discovered.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    emailDomain: Type.Optional(
      Type.String({
        description: 'The email domain for the vendor (e.g. @jupiterone.io).',
      }),
    ),
    expiresOn: Type.Optional(
      Type.Number({
        description:
          'If the entity is a temporary resource, optionally set the expiration date. For example, the expiration date of an SSL cert.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    id: Type.Optional(
      Type.Union([Type.String(), Type.Array(Type.String())], {
        description:
          'Identifiers of this entity assigned by the providers. Values are expected to be unique within the provider scope.',
        inherited: true,
      }),
    ),
    linkToBAA: Type.Optional(
      Type.String({
        description:
          'Link to Business Associate Agreement (BAA) document - for HIPAA only.',
        format: 'uri',
      }),
    ),
    linkToDPA: Type.Optional(
      Type.String({
        description:
          'Link to GDPR Data Processing Addendum (DPA) document - for GDPR only.',
        format: 'uri',
      }),
    ),
    linkToISA: Type.Optional(
      Type.String({
        description:
          'Link to the external information security assessment (ISA) report.',
        format: 'uri',
      }),
    ),
    linkToMSA: Type.Optional(
      Type.String({
        description: 'Link to Master Service Agreement (MSA) document.',
        format: 'uri',
      }),
    ),
    linkToNDA: Type.Optional(
      Type.String({
        description: 'Link to Non-Disclosure Agreement (NDA) document.',
        format: 'uri',
      }),
    ),
    linkToSLA: Type.Optional(
      Type.String({
        description: 'Link to Service Level Agreement (SLA) document.',
        format: 'uri',
      }),
    ),
    linkToVTR: Type.Optional(
      Type.String({
        description:
          'Link to the external vendor technology risk (VTR) report.',
        format: 'uri',
      }),
    ),
    mainContactAddress: Type.Optional(
      Type.String({
        description: 'Main physical/mailing address of the vendor.',
      }),
    ),
    mainContactEmail: Type.Optional(
      Type.String({
        description: "Email of the vendor's point of contact person.",
        format: 'email',
      }),
    ),
    mainContactName: Type.Optional(
      Type.String({ description: "The vendor's point of contact person." }),
    ),
    mainContactPhone: Type.Optional(
      Type.String({
        description: "Phone number of the vendor's point of contact person.",
      }),
    ),
    mainContactTitle: Type.Optional(
      Type.String({
        description:
          "The title of the vendor's main point of contact. For example, 'Manager of Operations'.",
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    notes: Type.Optional(
      Type.Array(Type.String(), {
        description: 'User provided notes about this entity',
        inherited: true,
      }),
    ),
    owner: Type.Optional(
      Type.String({
        description:
          'The owner of this entity. This could reference the name of the owner, or as reference ID/key to another entity in the graph as the owner.',
        inherited: true,
      }),
    ),
    public: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a public-facing resource (e.g. a public IP or public DNS record) or if the entity is publicly accessible. Default is false.',
        inherited: true,
      }),
    ),
    risk: Type.Optional(
      Type.Number({
        description: 'The risk level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    status: Type.Optional(
      Type.String({
        description:
          'Status of this entity set by the external source system or by a user, e.g. Active, Inactive, Decommissioned',
        examples: [
          'active',
          'inactive',
          'suspended',
          'terminated',
          'open',
          'closed',
          'pending',
          'unknown',
          'other',
        ],
        inherited: true,
      }),
    ),
    statusPage: Type.Optional(
      Type.String({
        description:
          "Link to the vendor's service status page (e.g. https://status.aws.amazon.com/).",
        format: 'uri',
      }),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    tags: Type.Optional(
      Type.Array(Type.String(), {
        description: 'An array of unnamed tags',
        inherited: true,
      }),
    ),
    temporary: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node is a temporary resource, such as a lambda instance or an EC2 instance started by ECS.',
        inherited: true,
      }),
    ),
    trust: Type.Optional(
      Type.Number({
        description: 'The trust level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    trusted: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a trusted resource. For example, a trusted Network, Host, Device, Application, Person, User, or Vendor.',
        inherited: true,
      }),
    ),
    updatedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that updated the entity',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    validated: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node has been validated as a known/valid Entity.',
        inherited: true,
      }),
    ),
    validatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) of when this vendor was last validated per the vendor management policy.',
        format: 'date-time',
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Web link to the source. For example: https://console.aws.amazon.com/iam/home#/roles/Administrator. This property is used by the UI to add a hyperlink to the entity.',
        format: 'uri',
        inherited: true,
      }),
    ),
    website: Type.Optional(
      Type.String({
        description: "The vendor's main website URL.",
        format: 'uri',
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#Vendor',
    description:
      'An external organization that is a vendor or service provider.',
  },
);
