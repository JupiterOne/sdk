/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type User = Static<typeof User>;
export const User = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    active: Type.Optional(
      Type.Boolean({
        description: 'Specifies whether user account is active or disabled.',
      }),
    ),
    classification: Type.Optional(Type.Union([Type.String(), Type.Null()])),
    complianceStatus: Type.Optional(
      Type.Number({
        description:
          'The compliance status of the entity, as a percentage of compliancy.',
        minimum: 0,
        maximum: 1,
        inherited: true,
      }),
    ),
    createdBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that created the entity',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    criticality: Type.Optional(
      Type.Number({
        description:
          'A number that represents the value or criticality of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    deletedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that deleted the entity',
        inherited: true,
      }),
    ),
    deletedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was deleted at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    discoveredBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that discovered the entity',
        inherited: true,
      }),
    ),
    discoveredOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was discovered.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    email: Type.Optional(
      Type.String({
        description:
          'The primary email address associated with the user account',
        format: 'email',
      }),
    ),
    emailDomain: Type.Optional(
      Type.Array(Type.String(), {
        description:
          'The domain portion of the email addresses associated with the user account.',
      }),
    ),
    expiresOn: Type.Optional(
      Type.Number({
        description:
          'If the entity is a temporary resource, optionally set the expiration date. For example, the expiration date of an SSL cert.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    firstName: Type.Optional(
      Type.String({
        description:
          "The user's official first name in the system (such as HR database)",
      }),
    ),
    id: Type.Optional(
      Type.Union([Type.String(), Type.Array(Type.String())], {
        description:
          'Identifiers of this entity assigned by the providers. Values are expected to be unique within the provider scope.',
        inherited: true,
      }),
    ),
    lastName: Type.Optional(
      Type.String({
        description:
          "The user's official last name in the system (such as HR database)",
      }),
    ),
    mfaEnabled: Type.Optional(
      Type.Boolean({
        description:
          'Specifies whether multi-factor authentication (MFA) is enabled for this user.',
      }),
    ),
    mfaType: Type.Optional(
      Type.String({
        description:
          'Specifies what type of multi-factor authentication (MFA) is being used by this user.',
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    notes: Type.Optional(
      Type.Array(Type.String(), {
        description: 'User provided notes about this entity',
        inherited: true,
      }),
    ),
    owner: Type.Optional(
      Type.String({
        description:
          'The owner of this entity. This could reference the name of the owner, or as reference ID/key to another entity in the graph as the owner.',
        inherited: true,
      }),
    ),
    passwordChangedOn: Type.Optional(
      Type.Number({
        description:
          "The timestamp (in milliseconds since epoch) of when the user's password was last rotated for this particular account.",
        format: 'date-time',
      }),
    ),
    public: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a public-facing resource (e.g. a public IP or public DNS record) or if the entity is publicly accessible. Default is false.',
        inherited: true,
      }),
    ),
    risk: Type.Optional(
      Type.Number({
        description: 'The risk level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    shortLoginId: Type.Optional(
      Type.String({
        description:
          'The shortened login Id. For example, if the username is the full email address (first.last@company.com), the shortLoginId would be the part before @ (first.last).',
      }),
    ),
    status: Type.Optional(
      Type.String({
        description:
          'Status of this entity set by the external source system or by a user, e.g. Active, Inactive, Decommissioned',
        examples: [
          'active',
          'inactive',
          'suspended',
          'terminated',
          'open',
          'closed',
          'pending',
          'unknown',
          'other',
        ],
        inherited: true,
      }),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    tags: Type.Optional(
      Type.Array(Type.String(), {
        description: 'An array of unnamed tags',
        inherited: true,
      }),
    ),
    temporary: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node is a temporary resource, such as a lambda instance or an EC2 instance started by ECS.',
        inherited: true,
      }),
    ),
    trust: Type.Optional(
      Type.Number({
        description: 'The trust level of this entity, on a scale between 1-10.',
        minimum: 1,
        maximum: 10,
        inherited: true,
      }),
    ),
    trusted: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this is a trusted resource. For example, a trusted Network, Host, Device, Application, Person, User, or Vendor.',
        inherited: true,
      }),
    ),
    updatedBy: Type.Optional(
      Type.String({
        description: 'The source/principal/user that updated the entity',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    username: Type.Optional(Type.String({ description: 'Username' })),
    validated: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this node has been validated as a known/valid Entity.',
        inherited: true,
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Web link to the source. For example: https://console.aws.amazon.com/iam/home#/roles/Administrator. This property is used by the UI to add a hyperlink to the entity.',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#User',
    description:
      'A user account/login to access certain systems and/or services. Examples include okta-user, aws-iam-user, ssh-user, local-user (on a host), etc.',
  },
);
