/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import {
  Kind,
  SchemaOptions,
  Static,
  TSchema,
  TUnion,
  Type,
  TypeRegistry,
} from '@sinclair/typebox';
import { Value } from '@sinclair/typebox/value';

TypeRegistry.Set(
  'ExtendedOneOf',
  (schema: any, value) =>
    1 ===
    schema.oneOf.reduce(
      (acc: number, schema: any) => acc + (Value.Check(schema, value) ? 1 : 0),
      0,
    ),
);

const OneOf = <T extends TSchema[]>(
  oneOf: [...T],
  options: SchemaOptions = {},
) =>
  Type.Unsafe<Static<TUnion<T>>>({
    ...options,
    [Kind]: 'ExtendedOneOf',
    oneOf,
  });

export type ThreatIntel = Static<typeof ThreatIntel>;
export const ThreatIntel = Type.Object(
  {
    _class: OneOf(
      [
        Type.String({ minLength: 2 }),
        Type.Array(Type.String({ minLength: 2 }), { minItems: 1 }),
      ],
      {
        description:
          "One or more classes conforming to a standard, abstract security data model. For example, an EC2 instance will have '_class':'Host'.",
        inherited: true,
      },
    ),
    _key: Type.String({
      description:
        'An identifier unique within the scope containing the object. For example, for a Bitbucket repo, this will be the GUID of the repo as assigned by Bitbucket. For an IAM Role, this will be the ARN of the role.',
      minLength: 10,
      inherited: true,
    }),
    _type: Type.String({
      description:
        "The type of object, typically reflecting the vendor and resource type. For example, 'aws_iam_user'. In some cases, a system knows about a type of entity that other systems know about, such as 'user_endpoint' or 'cve'.",
      minLength: 3,
      inherited: true,
    }),
    approved: Type.Optional(
      Type.Boolean({
        description: 'If this is record has been reviewed and approved.',
        inherited: true,
      }),
    ),
    approvedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was approved.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    approvers: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The list of approvers on the record.',
        inherited: true,
      }),
    ),
    category: Type.Optional(
      Type.String({
        description: 'The category of the official record',
        examples: [
          'exception',
          'finding',
          'hr',
          'incident',
          'issue',
          'job',
          'legal',
          'request',
          'policy',
          'procedure',
          'problem',
          'review',
          'risk',
          'other',
        ],
        inherited: true,
      }),
    ),
    classification: Type.Optional(
      Type.String({
        description:
          'The sensitivity of the data; should match company data classification scheme. For example: critical - confidential - internal - public.',
        examples: ['critical', 'confidential', 'internal', 'public'],
        inherited: true,
      }),
    ),
    content: Type.Optional(
      Type.String({
        description: 'Text content of the record/documentation',
        inherited: true,
      }),
    ),
    createdOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    description: Type.Optional(
      Type.String({
        description: 'An extended description of this entity.',
        inherited: true,
      }),
    ),
    displayName: Type.String({
      description:
        "Display name, e.g. a person's preferred name or an AWS account alias",
      inherited: true,
    }),
    exception: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record has an applied exception. For example, exception for a known finding or a PR that is not fully approved.',
        inherited: true,
      }),
    ),
    exceptionReason: Type.Optional(
      Type.String({
        description: 'Reason / description of the exception.',
        inherited: true,
      }),
    ),
    name: Type.String({ description: 'Name of this entity', inherited: true }),
    open: Type.Optional(
      Type.Boolean({
        description:
          'Indicates if this record is currently open. For example, an open Vulnerability finding (Vulnerability extends Record).',
        inherited: true,
      }),
    ),
    production: Type.Optional(
      Type.Boolean({
        description:
          'If this is a production record. For example, a production change management ticket would have this set to `true`, and have a `category` = `change` property. Another example would be a Vulnerability finding in production.',
        inherited: true,
      }),
    ),
    public: Type.Optional(
      Type.Boolean({
        description: 'If this is a public record. Defaults to false.',
        default: false,
        inherited: true,
      }),
    ),
    references: Type.Optional(
      Type.Array(Type.String(), {
        description: 'The array of links to references.',
      }),
    ),
    reportedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when this record was reported/opened. In most cases, this would be the same as `createdOn` but occasionally a record can be created at a different time than when it was first reported.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    reporter: Type.Optional(
      Type.String({
        description:
          'The person or system that reported or created this record.',
        inherited: true,
      }),
    ),
    summary: Type.Optional(
      Type.String({
        description: 'A summary / short description of this entity.',
        inherited: true,
      }),
    ),
    updatedOn: Type.Optional(
      Type.Number({
        description:
          'The timestamp (in milliseconds since epoch) when the entity was last updated at the source.',
        format: 'date-time',
        inherited: true,
      }),
    ),
    webLink: Type.Optional(
      Type.String({
        description:
          'Hyperlink to the location of this record, e.g. URL to a Jira issue',
        format: 'uri',
        inherited: true,
      }),
    ),
  },
  {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: '#ThreatIntel',
    description:
      'Threat intelligence captures information collected from vulnerability risk analysis by those with substantive expertise and access to all-source information. Threat intelligence helps a security professional determine the risk of a vulnerability finding to their organization.',
  },
);
