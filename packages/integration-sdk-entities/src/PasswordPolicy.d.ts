/* eslint-disable */
import { Entity } from './Base';

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A password policy is a specific `Ruleset`. It is separately defined because of its pervasive usage across digital environments and the well known properties (such as length and complexity) unique to a password policy.
 */
export type PasswordPolicy = Entity & {
  /**
   * Minimum password length
   */
  minLength?: number;
  /**
   * Indicates if a password must contain at least one symbol
   */
  requireSymbols?: boolean;
  /**
   * Indicates if a password must contain at least one number
   */
  requireNumbers?: boolean;
  /**
   * Indicates if a password must contain at least one uppercase character
   */
  requireUppercase?: boolean;
  /**
   * Indicates if a password must contain at least one lowercase character
   */
  requireLowercase?: boolean;
  /**
   * Specifies how long (in days) a password remains valid before it expires (0 indicates no limit - passwords do not expire)
   */
  maxAgeDays?: number;
  /**
   * Specifies the minimum time interval (in minutes) between password changes (0 indicates no limit)
   */
  minAgeMins?: number;
  /**
   * Specifies the number of previous passwords that users are prevented from reusing (0 indicates none)
   */
  historyCount?: number;
  /**
   * Indicates if the user is allowed/prevented to change their own password
   */
  preventReset?: boolean;
  /**
   * Specifies the number of days prior to password expiration when a user will be warned to reset their password (0 indicates no warning)
   */
  expiryWarningDays?: number;
  /**
   * Specifies whether users are prevented from setting a new password after their password has expired
   */
  hardExpiry?: boolean;
  /**
   * Indicates if the username must be excluded from the password
   */
  excludeUsername?: boolean;
  /**
   * The user profile attributes whose values must be excluded from the password
   */
  excludeAttributes?: string[];
  /**
   * Indicates whether to check passwords against a common/weak password dictionary
   */
  excludeCommonPasswords?: boolean;
  /**
   * Specifies the number of times users can attempt to log in to their accounts with an invalid password before their accounts are locked (0 indicates no limit)
   */
  lockoutAttempts?: number;
  /**
   * Specifies the time interval (in minutes) a locked account remains locked before it is automatically unlocked (0 indicates no limit)
   */
  autoUnlockMins?: number;
  /**
   * Specifies whether multi-factor authentication (MFA) is required
   */
  requireMFA?: boolean;
  [k: string]: unknown;
};
