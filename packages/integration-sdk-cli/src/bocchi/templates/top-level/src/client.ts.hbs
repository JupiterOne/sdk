import { HttpServiceClient } from './httpServiceClient';
import { IntegrationConfig } from './config';
import { 
{{#each template.steps}}
  {{pascalCase entity.name}}, 
{{/each}}
} from './steps/types';
import { Entity } from '@jupiterone/integration-sdk-core';

export type ResourceIteratee<T> = (each: T) => Promise<void> | void;

export class APIClient extends HttpServiceClient {
  private authHeaders: Record<string, string>;
  private baseUrl: string;

  constructor(readonly config: IntegrationConfig) {
    super();
    this.baseUrl = '{{template.baseUrl}}';
    this.authHeaders = {
      Authorization: `Bearer ${config.apiKey}`
    };
  }
{{#each template.steps}}

  {{#if (isSingletonRequest response.responseType)}}
  public async get{{titleCase entity.name}}({{#if parentAssociation}}parentEntity: Entity{{/if}}): Promise<any> {
    const url = `${this.baseUrl}{{{sanitizeUrlPath request.urlTemplate}}}`;
    return (await this.request({
      url,
      headers: { ...this.authHeaders },
      method: '{{sanitizeHttpMethod request.method}}',
      body: { {{#each (sanitizeHttpBody request.params)}}{{@key}}: {{this}},{{/each}} }
    })).{{response.dataPath}} as {{pascalCase entity.name}};
  }
  {{else}}
  public async iterate{{titleCase entity.name}}s(
    {{#if parentAssociation}}
    parentEntity: Entity,
    {{/if}}
    iteratee: ResourceIteratee<{{pascalCase entity.name}}>
  ): Promise<void> {
    {{#if response.nextTokenPath}}
    let nextToken: string | undefined;
    do {
    {{/if}}
      const url = `${this.baseUrl}{{sanitizeUrlPath request.urlTemplate}}`;
      const response = await this.request({
        url,
        headers: { ...this.authHeaders },
        method: '{{sanitizeHttpMethod request.method}}',
        {{#if request.params}}
        body: { {{#each (sanitizeHttpBody request.params)}}{{@key}}: {{this}},{{/each}} }
        {{/if}}
      });
      const resources = response.{{response.dataPath}} as {{pascalCase entity.name}}[];
      for (const resource of resources) {
        await iteratee(resource);
      }
    {{#if response.nextTokenPath}}
      nextToken = response.{{response.nextTokenPath}};
    } while (nextToken);
    {{/if}}
  }
  {{/if}}
{{/each}}
}

let client: APIClient | undefined;

export function createAPIClient(
  config: IntegrationConfig
): APIClient {
  return client
    ? client
    : new APIClient(config);
}