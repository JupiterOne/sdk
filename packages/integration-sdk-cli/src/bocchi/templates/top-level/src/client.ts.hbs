import { HttpServiceClient } from './httpServiceClient';
import { IntegrationConfig } from './config';
import { 
{{#each template.steps}}
  {{pascalCase entity.name}}, 
{{/each}}
} from './steps/types';

export type ResourceIteratee<T> = (each: T) => Promise<void> | void;

export class APIClient extends HttpServiceClient {
  private authHeaders: Record<string, string>;
  private baseUrl: string;

  constructor(readonly config: IntegrationConfig) {
    super();
    this.baseUrl = '{{template.baseUrl}}';
    this.authHeaders = {
      Authorization: `Bearer ${config.apiKey}`
    };
  }
{{#each template.steps}}

  {{#if (isSingletonRequest response.responseType)}}
  public async get{{titleCase entity.name}}(path: string): Promise<any> {
    const url = `${this.baseUrl}/${path}`;
    return (await this.request({
      url,
      headers: { ...this.authHeaders },
      method: '{{sanitizeHttpMethod request.method}}',
      body: {{sanitizeHttpBody request.params}}
    })).{{response.dataPath}} as {{pascalCase entity.name}};
  }
  {{else}}
    {{#if response.nextTokenPath}}
  public async iterate{{titleCase entity.name}}s(
    path: string,
    iteratee: ResourceIteratee<{{pascalCase entity.name}}>
  ): Promise<void> {
    const url = `${this.baseUrl}/${path}`;
    let nextToken: string | undefined;
    do {
      const response = await this.request({
        url,
        headers: { ...this.authHeaders },
        method: '{{sanitizeHttpMethod request.method}}',
        body: {{sanitizeHttpBody request.params}}
      });
      const resources = response.{{response.dataPath}} as {{pascalCase entity.name}}[];
      for (const resource of resources) {
        await iteratee(resource);
      }
      nextToken = response.{{response.nextTokenPath}};
    } while (nextToken);
  }
    {{else}}
  public async iterate{{titleCase entity.name}}s(
    path: string,
    iteratee: ResourceIteratee<{{pascalCase entity.name}}>
  ): Promise<void> {
    const url = `${this.baseUrl}/${path}`;
    const response = await this.request({
      url,
      headers: { ...this.authHeaders },
      method: '{{sanitizeHttpMethod request.method}}',
      body: {{sanitizeHttpBody request.params}}
    });
    const resources = response.{{response.dataPath}} as {{pascalCase entity.name}}[];
    for (const resource of resources) {
      await iteratee(resource);
    }
  }
    {{/if}}
  {{/if}}
{{/each}}
}

let client: APIClient | undefined;

export function createAPIClient(
  config: IntegrationConfig
): APIClient {
  return client
    ? client
    : new APIClient(config);
}