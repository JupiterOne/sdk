import {
  IntegrationStep,
  IntegrationStepExecutionContext,
} from '@jupiterone/integration-sdk-core';

import { IntegrationConfig } from '../../config';
import {
  Steps,
  Entities,
} from '../constants';
import { createAPIClient } from '../../client';
import { create{{pascalCase entityName}}Entity } from '../converters';

export const {{camelCase entityName}}{{pascalCase targetType}}RelationshipSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: Steps.{{pascalCase stepId}}{{pascalCase entityName}}{{pascalCase targetType}}Relationships,
    name: 'Build {{pascalCase entityName}} to {{pascalCase targetType}} Relationships',
    entities: [],
    relationships: [Relationships.{{constantCase entityName}}_{{constantCase targetType}}_RELATIONSHIPS],
    dependsOn: [
      {{#each dependsOn}}
        '{{this}}'{{#unless @last}},{{/unless}}
      {{/each}}
    ],
    executionHandler: buildRelationships,
  },
];

export async function buildRelationships({
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>): Promise<void> {
  await jobState.iterateEntities(
      { _type: '{{ entity._type }}' },
      async (entity) => {
        const targetEntity = await jobState.findEntity(entity[{{ targetField }}]);

        await jobState.addRelationship(createDirectRelationship({
          from: {{#if forwardRelationship}}entity{{else}}targetEntity{{/if}},
          _class: RelationshipClass.{{ class }},
          to: {{#if forwardRelationship}}targetEntity{{else}}entity{{/if}},
        }));
      }
    );
}
