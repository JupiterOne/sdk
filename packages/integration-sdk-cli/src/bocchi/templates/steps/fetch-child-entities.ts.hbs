{{#with step}}
import {
  createDirectRelationship,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
  {{#if directRelationships}}
  createDirectRelationship,
  {{/if}}
  {{#if mappedRelationships}}
  PrimitiveEntity,
  RelationshipDirection,
  createMappedRelationship,
  {{/if}}
} from '@jupiterone/integration-sdk-core';

import { IntegrationConfig } from '../../config';
import {
  Steps,
  Entities,
  {{#if directRelationships}}
  Relationships,
  {{/if}}
} from '../constants';
import { createAPIClient } from '../../client';
import { create{{pascalCase entity.name}}Entity } from '../converters';

export const {{camelCase entity.name}}Steps: IntegrationStep<IntegrationConfig>[] = [
  {{> stepMap }}
];

export async function {{camelCase id}}({
  instance,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>): Promise<void> {
  const client = createAPIClient(instance.config);

  await jobState.iterateEntities(
    { _type: '{{ parentAssociation.parentEntityType }}' },
    async (parentEntity) => {
      await client.iterate{{pascalCase entity.name}}s(
        parentEntity,
        async (data) => {
          const entity = await jobState.addEntity(create{{pascalCase entity.name}}Entity(data));

          await jobState.addRelationship(createDirectRelationship({
            from: parentEntity,
            _class: RelationshipClass.{{ parentAssociation.relationshipClass }},
            to: entity,
          }));
        },
      );
    }
  );
}

{{> directRelationships}}
{{> mappedRelationships}}
{{/with}}