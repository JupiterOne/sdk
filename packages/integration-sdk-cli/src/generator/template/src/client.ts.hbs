import { BaseAPIClient } from '@jupiterone/integration-sdk-http-client';
import { IntegrationConfig } from './config';
import { IntegrationLogger } from '@jupiterone/integration-sdk-core';

export type ResourceIteratee<T> = (each: T) => Promise<void> | void;

/**
 * An APIClient maintains authentication state and provides an interface to
 * third party data APIs.
 *
 * It is recommended that integrations wrap provider data APIs to provide a
 * place to handle error responses and implement common patterns for iterating
 * resources.
 */
export class APIClient extends BaseAPIClient {
  constructor(readonly config: IntegrationConfig, readonly logger: IntegrationLogger) {
    super({
      baseUrl: 'https://example.com/api',
      logger,
    });
  }

  getAuthorizationHeaders() {
    return {
      Authorization: `Bearer ${this.config.apiKey}`,
    };
  }

  public async verifyAuthentication(): Promise<void> {
    return Promise.resolve();
  }
}

export function createAPIClient(config: IntegrationConfig, logger: IntegrationLogger): APIClient {
  return new APIClient(config, logger);
}
